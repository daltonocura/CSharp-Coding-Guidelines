{"name":"Csharpguidelines","tagline":"A set of coding guidelines for C# 3.0, C# 4.0 and C# 5.0, design principles and layout rules for improving the overall quality of your code development.","body":"# About the Guidelines #\r\n\r\nThe guidelines provide a practical way of developing .NET applications using C# 3.0 or later depending on versions that applications are using. The existing coding guidelines that **Aliencube** have been using were originally written in 2003 by [Mike Kruger](http://www.icsharpcode.net/technotes/sharpdevelopcodingstyle03.pdf). Many development environments, however, have a lot been evolved from that point of time. This document is based on [Dennis Doomen](http://www.dennisdoomen.net)'s [C# Coding Guidelines](http://csharpguidelines.codeplex.com) released on [Nov 26th, 2012](http://csharpguidelines.codeplex.com/releases/view/98254).\r\n\r\n\r\n# History #\r\n\r\nSince Doomen's original document was written in MS-Word and released in PDF, which is hard to be maintainable, I made a decision to use plain markdown format for easy maintenance under the same license he originally set up. In addition to that, I got a permission to translate this into Korean, which will be provided soon.\r\n\r\n\r\n# Rationale #\r\n\r\nCoding guidelines are sometimes overlooked since they are considered as putting some unwanted burdens on developers. However, it has already been proved to worth doing because not all developers:\r\n\r\n* are aware that code is generally read 10 times more than it is changed;\r\n* are aware of the potential pitfalls of certain constructions in C#;\r\n* are introduced into certain conventions when using the .NET Framework such as `IDisposable` or the deferred execution nature of LINQ;\r\n* are aware of the impact of using (or neglecting to use) particular solutions on aspects like security, performance, multi-language support, etc; and\r\n* know that not every developer is as capable of understanding an elegant, but abstract, solution as the original developer.\r\n\r\n\r\n# Basic Principles #\r\n\r\nIn general, because this document cannot cover everything for each application's purpose, those two documents provided by Microsoft are the main starting points:\r\n\r\n* [C# Coding Conventions (C# Programming Guide)](http://msdn.microsoft.com/en-us/library/ff926074.aspx)\r\n* [Framework Design Guidelines](http://msdn.microsoft.com/en-us/library/ms229042.aspx)\r\n\r\nThose principles have already been applied to Visual Studio. So, using the default settings can check most of our coding conventions. [ReSharper](http://www.jetbrains.com/resharper) that we are using checks our code in a more robust way so following its default settings would be more efficient.\r\n\r\nIn addition to them, this document provides guidelines with the following principles:\r\n\r\n* **The Principle of Least Surprise** (or Astonishment) &ndash; you should choose a solution that does include any things people might not understand, or put on the wrong track.\r\n* **Keep It Simple Stupid** (KISS) &ndash; the simplest solution is more than sufficient.\r\n* **You Ain't Gonna Need It** (YAGNI) &ndash; you should create a solution for the current problem rather than the ones you think will happen later on (since when can you predict the future?).\r\n* **Don't Repeat Yourself** (DRY) &ndash; you are encouraged to prevent duplication in your code base without forgetting the [Rule of Three](http://lostechies.com/derickbailey/2012/10/31/abstraction-the-rule-of-three) heuristic.\r\n\r\n\r\n# How to Apply #\r\n\r\nDevelopers are not forced to comply with this guidelines. However, they are encouraged to apply those guidelines. Each guideline is clearly labeled like:\r\n\r\n* ![MUST](imgs/must.png): This guideline must be considered for coding.\r\n* ![SHOULD](imgs/should.png): This guideline is strongly recommended for coding.\r\n* ![MAY](imgs/may.png): This guideline can be applied for coding.\r\n\r\n![NOTE](imgs/note.png) The terms &ndash; `must`, `should` and `may` &ndash; are defined in [RFC 2119](http://www.ietf.org/rfc/rfc2119.txt)\r\n\r\n\r\n# Useful Resources #\r\n\r\nIn addition to the many links provided throughout this document, the following books, articles and sites for everyone interested in software quality are recommended:\r\n\r\n* [Code Complete: A Practical Handbook of Software Construction](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) (Steve McConnel)\r\n\r\nIt deals with all aspects of software development, and even though the book was originally written in 2004, but you'll be surprised when you see how accurate it still is. I wrote a review in 2009 if you want to get a sense of its contents.\r\n\r\n* [The Art of Agile Development](http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675) (James Shore)\r\n\r\nAnother great all-encompassing trip through the many practices preached by processes like Scrum and Extreme Programming. If you're looking for a quick introduction with a pragmatic touch, make sure you read James' book.\r\n\r\n* [Applying Domain Driven-Design and Patterns: With Examples in C# and .NET](http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202) (Jimmy Nilsson)\r\n\r\nThe book that started my interest for both Domain Driven Design and Test Driven Development. It's one of those books that I wished I had read a few years earlier. It would have saved me from many mistakes.\r\n\r\n* [Jeremy D. Miller's Blog](http://codebetter.com/blogs/jeremy.miller)\r\n\r\nAlthough he is not that active anymore, in the last couple of years he has written some excellent blog posts on Test Driven Development, Design Patterns and design principles. I've learned a lot from his real-life and practical insights.\r\n\r\n* [LINQ Framework Design Guidelines](http://blogs.msdn.com/b/mirceat/archive/2008/03/13/linq-framework-design-guidelines.aspx)\r\n\r\nA set of rules and recommendations that you should adhere to when creating your own implementations of `IQueryable<T>`.\r\n\r\n* [Best Practices for c# `async`/`await`](http://code.jonwagner.com/2012/09/06/best-practices-for-c-asyncawait/)\r\n\r\nThe rationale and source of several of the new guidelines in this documented, written by [Jon Wagner](https://twitter.com/jonwagnerdotcom).\r\n\r\n\r\n# Table of Contents #\r\n\r\n* [Class Design Guidelines](Class.Design.Guidelines.md)\r\n* [Member Design Guidelines](Member.Design.Guidelines.md)\r\n* [Miscellaneous Design Guidelines](Miscellaneous.Design.Guidelines.md)\r\n* [Maintainability Guidelines](Maintainability.Guidelines.md)\r\n* [Naming Guidelines](Naming.Guidelines.md)\r\n* [Performance Guidelines](Performance.Guidelines.md)\r\n* [Framework Guidelines](Framework.Guidelines.md)\r\n* [Documentation Guidelines](Documentation.Guidelines.md)\r\n* [Layout Guidelines](Layout.Guidelines.md)\r\n\r\n\r\n# License #\r\n\r\nThis is released under **New BSD License** as its original distributor does.\r\n\r\n>Copyright (c) 2014, aliencube.org All rights reserved.\r\n\r\n>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n>* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n\r\n>* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n\r\n>* Neither the name of the aliencube.org nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n\r\n>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n# Class Design Guidelines #\r\n\r\n## A class or interface should have a single purpose ![](imgs/must.png) ##\r\n\r\nA class or interface should have a single purpose within the system it participates in. In general, a class is either representing a primitive type like an email or ISBN number, an abstraction of some business concept, a plain data structure or responsible for orchestrating the interaction between other classes. It is never a combination of those. This rule is widely known as the [Single Responsibility Principle (SRP)][srp], one of the [SOLID principles][solid].\r\n\r\nUsing [Design Patterns](http://en.wikipedia.org/wiki/Design_pattern_(computer_science)) is to communicate the intent of a class. If a single design pattern is assigned to a class, the class is more likely doing more than one thing.\r\n\r\n\r\n## An interface should be small and focused ![](imgs/should.png) ##\r\n\r\nInterfaces should have a name that clearly explains the purpose or role of that interface within the system. Do not combine many vaguely related members on the same interface just because they were all on the same class. Separate the members based on the responsibility of those members so that callers only need to call or implement the interface related to a particular task. This rule is more commonly known as the [Interface Segregation Principle (ISP)][isp], one of the [SOLID principles][solid].\r\n\r\n\r\n## Use an interface rather than a base class to support multiple implementations ![](imgs/may.png) ##\r\n\r\nIf you want to expose an extension point from your class, expose it as an interface rather than a base class. You don't want to force users of that extension point to derive their implementations from a base-class that might have undesired behavior. However, for their convenience you may implement an (abstract) default implementation that can serve as a starting point.\r\n\r\n\r\n## Use an interface to decouple classes from each other ![](imgs/should.png) ##\r\n\r\nInterfaces are a very effective mechanism for decoupling classes from each other because:\r\n\r\n* they can prevent bidirectional associations;\r\n* they simplify the replacement of one implementation with another;\r\n* They allow replacing an expensive external service or resource with a temporary stub for use in a non-production environment;\r\n* they allow replacing the actual implementation with a dummy implementation or a fake object in a unit test; and\r\n* using a dependency injection framework you can centralize the choice which class is going to be used whenever a specific interface is requested.\r\n\r\n\r\n## Avoid static classes ![](imgs/may.png) ##\r\n\r\nStatic classes very often lead to badly designed code, except implementing extension method containers. They are also very difficult to test in isolation unless you're willing to use some very hacky tools.\r\n\r\n![NOTE](imgs/note.png) If you really need a static class, mark it as `static` so that the compiler can prevent the class and its members from instantiating. This relieves you of creating an explicit private constructor.\r\n\r\n\r\n## Don't hide inherited members with the `new` keyword ![](imgs/must.png) ##\r\n\r\nNot only does the new keyword break [Polymorphism](http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming), one of the most essential object-orientation principles, it also makes subclasses more difficult to understand. Consider the following two classes:\r\n\r\n```c#\r\npublic class Book\r\n{\r\n    public virtual void Print()\r\n    {\r\n        Console.WriteLine(\"Printing Book\");\r\n    }\r\n}\r\n\r\npublic class PocketBook : Book\r\n{\r\n    public new void Print()\r\n    {\r\n        Console.WriteLine(\"Printing PocketBook\");\r\n    }\r\n}\r\n```\r\n\r\nThis will cause behavior that you would not normally expect from class hierarchies:\r\n\r\n```c#\r\nvar pocketBook = new PocketBook();\r\n\r\npocketBook.Print();         // Will output \"Printing PocketBook \"\r\n((Book)pocketBook).Print(); // Will output \"Printing Book\"\r\n```\r\n\r\nIt ![MUST](imgs/must.png) **NOT** make a difference whether you call Print through a reference to the base class or through the derived class.\r\n\r\n\r\n## Treat a derived object as if it were a base class object ![](imgs/should.png) ##\r\n\r\nIn other words, you ![SHOULD](imgs/should.png) be able to use a reference to an object of a derived class wherever a reference to its base class object is used without knowing the specific derived class. A very notorious example of a violation of this rule is throwing a `NotImplementedException` when overriding some of the base-class methods. A less subtle example is not honoring the behavior expected by the base-class. This rule is also known as the [Liskov Substitution Principle (LSP)][lsp], one of the [SOLID principles][solid].\r\n\r\n\r\n## Don't refer to derived classes from the base class ![](imgs/must.png) ##\r\n\r\nHaving dependencies from a base class to its sub-classes goes against proper object-oriented design and might prevent other developers from adding new derived classes.\r\n\r\n\r\n## Avoid exposing the other objects an object depends on ##\r\n\r\nIf you find yourself writing code like this then you might be violating the [Law of Demeter (LoD)](http://en.wikipedia.org/wiki/Law_of_Demeter). More detailed explanations of LoD can be found at [here](http://www.blackwasp.co.uk/LawOfDemeter.aspx).\r\n\r\n```c#\r\nsomeObject.SomeProperty.GetChild().Foo()\r\n```\r\n\r\nAn object should not expose any other classes it depends on because callers may misuse that exposed property or method to access the object behind it. By doing so, you allow calling code to become coupled to the class you are using, and thereby limiting the chance you can easily replace it in a future stage.\r\n\r\n![NOTE](imgs/note.png) Using a class designed with the [Fluent Interface](http://en.wikipedia.org/wiki/Fluent_interface) pattern like LINQ does seem to violate this rule, but it is simply returning itself so that method chaining is allowed.\r\n\r\n![EXCEPTION](imgs/exception.png) Inversion of Control (or Dependency Injection) frameworks such as [Unity](http://msdn.microsoft.com/unity), [Autofac](http://autofac.org) or [Ninject](http://www.ninject.org) often require you to expose a dependency as a public property. As long as this property is not used for anything else than dependency injection, it wouldn't be considered as a violation.\r\n\r\n\r\n## Avoid bidirectional dependencies ![](imgs/must.png) ##\r\n\r\nThis means that two classes know about each other's public members or rely on each other's internal behavior. Refactoring or replacing one of those two classes requires changes on both parties and may involve a lot of unexpected work. The most obvious way of breaking that dependency is introducing an interface for one of the classes and using dependency injection.\r\n\r\n\r\n## Classes should have state and behavior ![](imgs/must.png) ##\r\n\r\nUnless your classes are only to transfer data over communication channels called [Data Transfer Objects](http://martinfowler.com/eaaCatalog/dataTransferObject.html), they ![MUST](imgs/must.png) have logics defining their state and behavior.\r\n\r\n\r\n[solid]: http://programmers.stackexchange.com/questions/202571/solid-principles-and-code-structure\r\n[srp]: http://www.objectmentor.com/resources/articles/srp.pdf\r\n[ocp]: http://www.objectmentor.com/resources/articles/ocp.pdf\r\n[lsp]: http://www.objectmentor.com/resources/articles/lsp.pdf\r\n[isp]: http://www.objectmentor.com/resources/articles/isp.pdf\r\n[dip]: http://www.objectmentor.com/resources/articles/dip.pdf\r\n\r\n# Member Design Guidelines #\r\n\r\n## Allow properties to be set in any order ![](imgs/must.png) ##\r\n\r\nProperties should be stateless with respect to other properties, i.e. there should not be a difference between first setting property `A` and then `B` or vice versa.\r\n\r\n\r\n## Use a method instead of a property ##\r\n\r\nUsing a method is way better than a property, if:\r\n\r\n* The work is more expensive than setting a field value;\r\n* it represents a conversion such as the `Object.ToString()` method;\r\n* it returns a different result each time it is called, even if the arguments didn't change. For example, the `NewGuid()` method returns a different value each time it is called; or\r\n* the operation causes a side effect such as changing some internal state not directly related the property (which violates the [Command Query Separation](http://martinfowler.com/bliki/CommandQuerySeparation.html)).\r\n\r\n![EXCEPTION](imgs/exception.png) Populating an internal cache or implementing [lazy-loading](http://www.martinfowler.com/eaaCatalog/lazyLoad.html) is a good exception.\r\n\r\n\r\n## Don't use mutually exclusive properties ![](imgs/must.png) ##\r\n\r\nHaving properties that cannot be used at the same time typically signals a type that is representing two conflicting concepts. Even though those concepts may share some of the behavior and state, they obviously have different rules that do not cooperate.\r\n\r\nThis violation is often seen in domain models and introduces all kinds of conditional logic related to those conflicting rules, causing a ripple effect that significantly worsens the maintenance burden.\r\n\r\n\r\n## A method or property does only one thing ![](imgs/must.png) ##\r\n\r\nBased on [SRP][srp], a method ![MUST](imgs/must.png) have a single responsibility.\r\n\r\n\r\n## Don't expose stateful objects through static members ![](imgs/should.png) ##\r\n\r\nA stateful object is an object that contains many properties and lots of behavior behind that. If you expose such an object through a static property or method of some other object, it will be very difficult to refactor or unit test a class that relies on such a stateful object. In general, introducing a construction like that is a great example of violating many of the guidelines of this document.\r\n\r\nA classic example of this is the `HttpContext.Current` property, part of ASP.NET. Many see the `HttpContext` class as a source for a lot of ugly code. In fact, the testing guideline [Isolate the Ugly Stuff](http://msdn.microsoft.com/en-us/magazine/dd263069.aspx#id0070015) often refers to this class.\r\n\r\n\r\n## Return an `IEnumerable<T>` or `ICollection<T>` instead of a concrete collection class ![](imgs/should.png) ##\r\n\r\nIn general, you don't want callers to be able to change an internal collection, so don't return arrays, lists or other collection classes directly. Instead, return an `IEnumerable<T>`, or, if the caller must be able to determine the count, an `ICollection<T>`.\r\n\r\n![NOTE](imgs/note.png) In .NET 4.5, you can also use `IReadOnlyCollection<T>`, `IReadOnlyList<T>` or `IReadOnlyDictionary<TKey, TValue>`.\r\n\r\n\r\n## Properties, methods and arguments representing strings or collections should never be `null` ![](imgs/must.png) ##\r\n\r\nReturning `null` can be unexpected by the caller. Always return an **empty collection** or an **empty string** instead of a `null` reference. This also prevents cluttering your code base with additional checks for `null`, or even worse, `String.IsNotNullOrEmpty()` or `String.IsNullOrWhiteSpace()`.\r\n\r\n\r\n## Define parameters as specific as possible ![](imgs/should.png) ##\r\n\r\nIf your member needs a specific piece of data, define parameters as specific as that and don't take a container object instead. For instance, consider a method that needs a connection string that is exposed through some central `IConfiguration` interface. Rather than taking a dependency on the entire configuration, just define a parameter for the connection string. This not only prevents unnecessary coupling, it also improved maintainability in a long run.\r\n\r\n\r\n## Consider using domain-specific value types rather than primitives ![](imgs/may.png) ##\r\n\r\nInstead of using strings, integers and decimals for representing domain specific types such as an ISBN number, an email address or amount of money, consider created dedicated value objects that wrap both the data and the validation rules that apply to it. By doing this, you prevent ending up having multiple implementations of the same business rules, which both improves maintainability and prevents bugs.\r\n\r\n\r\n[solid]: http://programmers.stackexchange.com/questions/202571/solid-principles-and-code-structure\r\n[srp]: http://www.objectmentor.com/resources/articles/srp.pdf\r\n[ocp]: http://www.objectmentor.com/resources/articles/ocp.pdf\r\n[lsp]: http://www.objectmentor.com/resources/articles/lsp.pdf\r\n[isp]: http://www.objectmentor.com/resources/articles/isp.pdf\r\n[dip]: http://www.objectmentor.com/resources/articles/dip.pdf\r\n\r\n# Miscellaneous Design Guidelines #\r\n\r\n## Throw exceptions rather than returning some kind of status value ![](imgs/should.png) ##\r\n\r\nA code base that uses return values for reporting the success or failure tends to have nested if-statements sprinkled all over the code. Quite often, a caller forgets to check the return value anyhow. Structured exception handling has been introduced to allow you to throw exceptions and catch or replace exceptions at a higher layer. In most systems it is quite common to throw exceptions whenever an unexpected situations occurs.\r\n\r\n\r\n## Provide a rich and meaningful exception message text ![](imgs/should.png) ##\r\n\r\nThe message should explain the cause of the exception and clearly describe what needs to be done to avoid the exception.\r\n\r\n\r\n## Throw the most specific exception that is appropriate ![](imgs/may.png) ##\r\n\r\nFor example, if a method receives a `null` argument, it should throw `ArgumentNullException` instead of its base type `ArgumentException`.\r\n\r\n\r\n## Don't swallow errors by catching generic exceptions ![](imgs/must.png) ##\r\n\r\nAvoid swallowing errors by catching non-specific exceptions, such as `Exception`, `SystemException`, and so on, in application code. Only top-level code, such as a last-chance exception handler, should catch a non-specific exception for logging purposes and a graceful shutdown of the application.\r\n\r\n\r\n## Properly handle exceptions in asynchronous code ![](imgs/should.png) ##\r\n\r\nWhen throwing or handling exceptions in code that uses `async`/`await` or a `Task` remember the following two rules:\r\n\r\n* Exceptions that occur within an `async`/`await` block and inside a `Task`'s action are propagated to the awaiter.\r\n* Exceptions that occur in the code preceding the asynchronous block are propagated to the caller.\r\n\r\n\r\n## Always check an event handler delegate for `null` ![](imgs/must.png) ##\r\n\r\nAn event that has no subscribers is `null`, so before invoking, always make sure that the delegate list represented by the event variable is not `null`. Furthermore, to prevent conflicting changes from concurrent threads, use a temporary variable to prevent concurrent changes to the delegate.\r\n\r\n```c#\r\nevent EventHandler<NotifyEventArgs> Notify;\r\nvoid RaiseNotifyEvent(NotifyEventArgs args)\r\n{\r\n    EventHandler<NotifyEventArgs> handlers = Notify;\r\n    if (handlers != null)\r\n    {\r\n        handlers(this, args);\r\n    }\r\n}\r\n```\r\n\r\nYou can prevent the delegate list from being empty altogether. Simply assign an empty delegate like this:\r\n\r\n```c#\r\nevent EventHandler<NotifyEventArgs> Notify = delegate {};\r\n```\r\n\r\n\r\n## Use a protected virtual method to raise each event ![](imgs/should.png) ##\r\n\r\nComplying with this guideline allows derived classes to handle a base class event by overriding the protected method. The name of the protected virtual method should be the same as the event name prefixed with On. For example, the protected virtual method for an event named `TimeChanged` is named `OnTimeChanged`.\r\n\r\n![NOTE](imgs/note.png) Derived classes that override the protected virtual method are not required to call the base class implementation. The base class must continue to work correctly even if its implementation is not called.\r\n\r\n\r\n## Consider providing property-changed events ![](imgs/may.png) ##\r\n\r\nConsider providing events that are raised when certain properties are changed. Such an event should be named `PropertyChanged`, where Property should be replaced with the name of the property with which this event is associated.\r\n\r\n![NOTE](imgs/note.png) If your class has many properties that require corresponding events, consider implementing the `INotifyPropertyChanged` interface instead. It is often used in the [Presentation Model](http://martinfowler.com/eaaDev/PresentationModel.html) and [Model-View-ViewModel](http://msdn.microsoft.com/en-us/magazine/dd419663.aspx) patterns.\r\n\r\n\r\n## Don't pass `null` as the sender argument when raising an event ![](imgs/must.png) ##\r\n\r\nOften, an event handler is used to handle similar events from multiple senders. The sender argument is then used to get to the source of the event. Always pass a reference to the source (typically `this`) when raising the event. Furthermore don't pass `null` as the event data parameter when raising an event. If there is no event data, pass `EventArgs.Empty` instead of `null`.\r\n\r\n![EXCEPTION](imgs/exception.png) On static events, the sender argument ![SHOULD](imgs/should.png) be `null`.\r\n\r\n\r\n## Use generic constraints if applicable ![](imgs/should.png) ##\r\n\r\nInstead of casting to and from the `object` type in generic types or methods, use `where` constraints or the `as` operator to specify the exact characteristics of the generic parameter. For example:\r\n\r\n```c#\r\nclass SomeClass\r\n{\r\n    ...\r\n}\r\n\r\n// Don't\r\nclass MyClass<T>\r\n{\r\n    void SomeMethod(T t)\r\n    {\r\n        object temp = t;\r\n        SomeClass obj = (SomeClass) temp;\r\n    }\r\n}\r\n\r\n// Do\r\nclass MyClass<T> where T : SomeClass\r\n{\r\n    void SomeMethod(T t)\r\n    {\r\n        SomeClass obj = t;\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Evaluate the result of a LINQ expression before returning it ![](imgs/must.png) ##\r\n\r\nConsider the following code snippet:\r\n\r\n```c#\r\npublic IEnumerable<GoldMember> GetGoldMemberCustomers()\r\n{\r\n    const decimal GoldMemberThresholdInEuro = 1000000;\r\n    var q = (from customer in db.Customers\r\n             where customer.Balance > GoldMemberThresholdInEuro\r\n             select new GoldMember(customer.Name, customer.Balance));\r\n    return q;\r\n}\r\n```\r\n\r\nSince LINQ queries use deferred execution, returning `q` will actually return the expression tree representing the above query. Each time the caller evaluates this result using a `foreach` or something similar, the entire query is re-executed resulting in new instances of `GoldMember` every time. Consequently, you cannot use the `==` operator to compare multiple `GoldMember` instances. Instead, always explicitly evaluate the result of a LINQ query using `ToList()`, `ToArray()` or similar methods.\r\n\r\n# Maintainability Guidelines #\r\n\r\n## Methods does not exceed 7 statements ![](imgs/must.png) ##\r\n\r\nA method that requires more than 7 statements is simply doing too much or has too many responsibilities. It also requires the human mind to analyze the exact statements to understand what the code is doing. Break it down in multiple small and focused methods with self-explaining names, but make sure the high-level algorithm is still clear.\r\n\r\n\r\n## Make all members `private` and types `internal` by default ![](imgs/must.png) ##\r\n\r\nTo make a more conscious decision on which members to make available to other classes first restrict the scope as much as possible. Then carefully decide what to expose as a public member or type.\r\n\r\n\r\n## Avoid conditions with double negatives ![](imgs/should.png) ##\r\n\r\nAlthough a property like `customer.HasNoOrders` make sense, avoid using it in a negative condition like this:\r\n\r\n```c#\r\nbool hasOrders = !customer.HasNoOrders;\r\n```\r\n\r\nDouble negatives are more difficult to grasp than simple expressions, and people tend to read over the double negative easily.\r\n\r\n\r\n## Name assemblies after their contained namespace ![](imgs/may.png) ##\r\n\r\nAll DLLs should be named according to the pattern `<Company>.<Component>.dll` where `<Company>` refers to your company's name and `<Component>` contains one or more dot-separated clauses. For example `Dnb.Web.Controls.dll`.\r\n\r\nAs an example, consider a group of classes organized under the namespace `Dnb.Web.Binding` exposed by a certain assembly. According to this guideline, that assembly should be called `Dnb.Web.Binding.dll`.\r\n\r\n![EXCEPTION](imgs/exception.png) If you decide to combine classes from multiple unrelated namespaces into one assembly, consider suffix to the assembly with `Core`, but do not use that suffix in the namespaces. For instance, `Dnb.Consulting.Core.dll`.\r\n\r\n\r\n## Name a source file to the type it contains ![](imgs/may.png) ##\r\n\r\nUse Pascal casing for naming the file and don’t use underscores.\r\n\r\n\r\n## Limit the contents of a source code file to one type ![](imgs/may.png) ##\r\n\r\nMake sure that one source file can be responsible for fully or partially contributing to one class.\r\n\r\n![EXCEPTION](imgs/exception.png) Nested types can, for obvious reasons, be part of the same file.\r\n\r\n\r\n## Name a source file to the logical function of the partial type ![](imgs/may.png) ##\r\n\r\nWhen using partial types and allocating a part per file, name each file after the logical part that part plays. For example:\r\n\r\n```c#\r\n// In MyClass.cs\r\npublic partial class MyClass\r\n{\r\n    ...\r\n}\r\n\r\n// In MyClass.Designer.cs\r\npublic partial class MyClass\r\n{\r\n    ...\r\n}\r\n```\r\n\r\n\r\n## Use using statements instead of fully qualified type names ![](imgs/may.png) ##\r\n\r\nLimit usage of fully qualified type names to prevent name clashing. For example, don't do this.\r\n\r\n```c#\r\nvar list = new System.Collections.Generic.List<string>();\r\n```\r\n\r\nInstead, do this.\r\n\r\n```c#\r\nusing System.Collections.Generic;\r\n\r\nvar list = new List<string>();\r\n```\r\n\r\nIf you do need to prevent name clashing, use a using directive to assign an alias:\r\n\r\n```c#\r\nusing Label = System.Web.UI.WebControls.Label;\r\n```\r\n\r\n\r\n## Don't use **magic** numbers ![](imgs/must.png) ##\r\n\r\nDon't use literal values, either numeric or strings, in your code other than to define symbolic constants. For example:\r\n\r\n```c#\r\npublic class Whatever\r\n{\r\n    public static readonly Color PapayaWhip = new Color(0xFFEFD5);\r\n    public const int MaxNumberOfWheels = 18;\r\n}\r\n```\r\n\r\nStrings intended for logging or tracing are exempt from this rule. Literals are allowed when their meaning is clear from the context, and not subject to future changes, For example:\r\n\r\n```c#\r\nmean = (a + b) / 2;                         // okay\r\nWaitMilliseconds(waitTimeInSeconds * 1000); // clear enough\r\n```\r\n\r\nIf the value of one constant depends on the value of another, do attempt to make this explicit in the code.\r\n\r\n```c#\r\npublic class SomeSpecialContainer\r\n{\r\n    public const int MaxItems = 32;\r\n    public const int HighWaterMark = 3 * MaxItems / 4; // at 75%\r\n}\r\n```\r\n\r\n![NOTE](imgs/note.png) An enumeration can often be used for certain types of symbolic constants.\r\n\r\n\r\n## Only use `var` when the type is very obvious ![](imgs/must.png) ##\r\n\r\nOnly use `var` as the result of a LINQ query, or if the type is very obvious from the same statement and using it would improve readability. So don't\r\n\r\n```c#\r\nvar i = 3;                                 // what type? int? uint? float?\r\nvar myfoo = MyFactoryMethod.Create(\"arg\"); // Not obvious what base-class or\r\n                                           // interface to expect. Also difficult\r\n                                           // to refactor if you can't search for\r\n                                           // the class\r\n```\r\n\r\nInstead, use `var` like this.\r\n\r\n```c#\r\nvar q = from order in orders where order.Items > 10 and order.TotalValue > 1000;\r\nvar repository = new RepositoryFactory.Get<IOrderRepository>();\r\nvar list = new ReadOnlyCollection<string>();\r\n```\r\n\r\nIn all of three above examples it is clear what type to expect. For a more detailed rationale about the advantages and disadvantages of using `var`, read Eric Lippert's [Uses and misuses of implicit typing](http://blogs.msdn.com/b/ericlippert/archive/2011/04/20/uses-and-misuses-of-implicit-typing.aspx).\r\n\r\n\r\n## Declare and initialize variables as late as possible ![](imgs/should.png) ##\r\n\r\nAvoid the C and Visual Basic styles where all variables have to be defined at the beginning of a block, but rather define and initialize each variable at the point where it is needed.\r\n\r\n\r\n## Assign each variable in a separate statement ![](imgs/must.png) ##\r\n\r\nDon't use confusing constructs like the one below.\r\n\r\n```c#\r\nvar result = someField = GetSomeMethod();\r\n```\r\n\r\n\r\n## Favour Object and Collection Initialisers over separate statements ![](imgs/should.png) ##\r\n\r\nAvoid\r\n\r\n```c#\r\nvar startInfo = new ProcessStartInfo(\"myapp.exe\");\r\nstartInfo.StandardOutput = Console.Output;\r\nstartInfo.UseShellExecute = true;\r\n```\r\n\r\nInstead, use [Object Initialisers](http://msdn.microsoft.com/en-us/library/bb384062.aspx).\r\n\r\n```c#\r\nvar startInfo = new ProcessStartInfo(\"myapp.exe\")\r\n                {\r\n                    StandardOutput = Console.Output,\r\n                    UseShellExecute = true\r\n                };\r\n```\r\n\r\n\r\nSimilarly, instead of adding items to collection or dictionary individually\r\n\r\n```c#\r\nvar countries = new List<string>();\r\ncountries.Add(\"Netherlands\");\r\ncountries.Add(\"United States\");\r\n```\r\n\r\nUse collection or [dictionary initialisers](http://msdn.microsoft.com/en-us/library/bb531208.aspx).\r\n\r\n```c#\r\nvar countries = new List<string>\r\n                {\r\n                    \"Netherlands\",\r\n                    \"United States\"\r\n                };\r\n```\r\n\r\n\r\n## Don't make explicit comparisons to `true` or `false` ![](imgs/must.png) ##\r\n\r\nIt is usually bad style to compare a `bool` type expression to `true` or `false`. For example:\r\n\r\n```c#\r\nwhile (condition == false)                    // wrong; bad style\r\nwhile (condition != true)                     // also wrong\r\nwhile (((condition == true) == true) == true) // where do you stop?\r\n\r\nwhile (condition)                             // OK\r\n```\r\n\r\n\r\n## Don't change a loop variable inside a for or `foreach` loop ![](imgs/should.png) ##\r\n\r\nUpdating the loop variable within the loop body is generally considered confusing. It is even worse that the loop variables are modified in more than one place in the loop. Consider `break` or `continue` instead, to change the loop variables.\r\n\r\n```c#\r\nfor (int index = 0; index < 10; ++index)\r\n{\r\n    if (some condition)\r\n    {\r\n        index = 11; // Wrong! Use 'break' or 'continue' instead.\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Avoid nested loops ![](imgs/should.png) ##\r\n\r\nA method that nests loops is more difficult to understand than one with only a single loop. In fact, in most cases having nested loops can be replaced with a much simpler LINQ query that uses the `from` keyword twice or more to join the data.\r\n\r\n\r\n## Always add a block after keywords such as `if`, `else`, `while`, `for`, `foreach` and `case` ![](imgs/should.png) ##\r\n\r\nPlease note that this also avoids possible confusion in statements of the form:\r\n\r\n```c#\r\n// The wrong way:\r\nif (b1) if (b2) Foo(); else Bar(); // which 'if' goes with the 'else'?\r\n\r\n// The right way:\r\nif (b1)\r\n{\r\n    if (b2)\r\n    {\r\n        Foo();\r\n    }\r\n    else\r\n    {\r\n        Bar();\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Always add a default block after the last `case` in a `switch` statement ![](imgs/must.png) ##\r\n\r\nAdd a descriptive comment if the default block is supposed to be empty. Moreover, if that block is not supposed to be reached, throw an `InvalidOperationException` to detect future changes that may fall through the existing cases. This ensures better code, because all paths the code can travel has been thought about.\r\n\r\n```c#\r\nvoid Foo(string answer)\r\n{\r\n    switch (answer)\r\n    {\r\n        case \"no\":\r\n            Console.WriteLine(\"You answered with No\");\r\n            break;\r\n        case \"yes\":\r\n            Console.WriteLine(\"You answered with Yes\");\r\n            break;\r\n        default:\r\n            // Not supposed to end up here.\r\n            throw new InvalidOperationException(\"Unexpected answer \" + answer);\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Finish every `if`-`else`-`if` statement with an `else` part ![](imgs/should.png) ##\r\n\r\nSimilarly to the `default` block in a `switch` statement, consider the following way:\r\n\r\n```c#\r\nvoid Foo(string answer)\r\n{\r\n    if (answer == \"no\")\r\n    {\r\n        Console.WriteLine(\"You answered with No\");\r\n    }\r\n    else if (answer == \"yes\")\r\n    {\r\n        Console.WriteLine(\"You answered with Yes\");\r\n    }\r\n    else\r\n    {\r\n        // What should happen when this point is reached? Ignored? If not,\r\n        // throw an InvalidOperationException.\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Be reluctant with multiple return statements ![](imgs/should.png) ##\r\n\r\nOne entry, one exit is a sound principle and keeps control flow readable. However, if the method is very small and complies with [this guideline](Maintainability.Guidelines.md#methods-does-not-exceed-7-statements-) then multiple return statements may actually improve readability over some central boolean flag that is updated at various points.\r\n\r\n\r\n## Don't use `if`-`else` statements instead of a simple (conditional) assignment ![](imgs/should.png) ##\r\n\r\nExpress your intentions directly. For example:\r\n\r\n```c#\r\n// Bad practice\r\nbool pos;\r\nif (val > 0)\r\n{\r\n    pos = true;\r\n}\r\nelse\r\n{\r\n    pos = false;\r\n}\r\n\r\n// Preferred practice\r\nbool pos = (val > 0); // initialisation\r\n```\r\n\r\nOr this can be another alternative:\r\n\r\n```c#\r\n// Avoid\r\nstring result;\r\nif (someString != null)\r\n{\r\n    result = someString;\r\n}\r\nelse\r\n{\r\n    result = \"Unavailable\";\r\n}\r\nreturn result;\r\n\r\n// Instead\r\nreturn someString ?? \"Unavailable\";\r\n```\r\n\r\n\r\n## Encapsulate complex expressions in a method or property ![](imgs/must.png) ##\r\n\r\nConsider the following example:\r\n\r\n```c#\r\nif (member.HidesBaseClassMember && (member.NodeType != NodeType.InstanceInitializer))\r\n{\r\n    // do something\r\n}\r\n```\r\n\r\nIn order to understand what this expression is about, you need to analyse its exact details and all the possible outcomes. Obviously, you could add an explanatory comment on top of it, but it is much better to replace this complex expression with a clearly named method like:\r\n\r\n```c#\r\nif (NonConstructorMemberUsesNewKeyword(member))\r\n{\r\n    // do something\r\n}\r\n\r\nprivate bool NonConstructorMemberUsesNewKeyword(Member member)\r\n{\r\n    return member.HidesBaseClassMember &&\r\n           member.NodeType != NodeType.InstanceInitializer;\r\n}\r\n```\r\n\r\nYou still need to understand the expression if you are modifying it, but the calling code is now much easier to grasp.\r\n\r\n\r\n## Call the most overloaded method from other overloads ![](imgs/should.png) ##\r\n\r\nThis guideline only applies to overloads that are intended for providing optional arguments. Consider for example:\r\n\r\n```c#\r\npublic class MyString\r\n{\r\n    private string someText;\r\n\r\n    public MyString(string text)\r\n    {\r\n        this.someText = text;\r\n    }\r\n\r\n    public int IndexOf(string phrase)\r\n    {\r\n        return IndexOf(phrase, 0, someText.Length);\r\n    }\r\n\r\n    public int IndexOf(string phrase, int startIndex)\r\n    {\r\n        return IndexOf(phrase, startIndex, someText.Length - startIndex );\r\n    }\r\n\r\n    public virtual int IndexOf(string phrase, int startIndex, int count)\r\n    {\r\n        return someText.IndexOf(phrase, startIndex, count);\r\n    }\r\n}\r\n```\r\n\r\nThe class `MyString` provides three overloads for the `IndexOf` method, but two of them simply call the one with the most parameters.\r\n\r\n![NOTE](imgs/note.png) The same rule can apply to class constructors; implement the most complete overload and call that one from the other overloads using the `this()` operator.\r\n\r\n![NOTE](imgs/note.png) The parameters with the same name should appear in the same position in all overloads.\r\n\r\n![IMPORTANT](imgs/important.png) If you also want to allow derived classes to override these methods, define the most complete overload as a `protected virtual` method that is called by all overloads.\r\n\r\n\r\n## Only use optional arguments to replace overloads ![](imgs/must.png) ##\r\n\r\nThe only valid reason for using C# 4.0's optional arguments is to replace the example from [this guideline](Maintainability.Guidelines.md#call-the-most-overloaded-method-from-other-overloads-) with a single method like:\r\n\r\n```c#\r\npublic virtual int IndexOf(string phrase, int startIndex = 0, int count = 0)\r\n{\r\n\treturn someText.IndexOf(phrase, startIndex, count);\r\n}\r\n```\r\n\r\nIf the optional parameter is a reference type then it can only have a default value of `null`. But since strings, lists and collections should never be `null` according to [this rule](Miscellaneous.Design.Guidelines.md#dont-pass-null-as-the-sender-argument-when-raising-an-event-), you must use overloaded methods instead.\r\n\r\n![NOTE](/imgs/note.png) The default values of the optional parameters are stored at the caller side. As such, changing the default value without recompiling the calling code will not apply the new default value properly.\r\n\r\n![NOTE](/imgs/note.png) When an interface method defines an optional parameter, its default value is not considered during overload resolution unless you call the concrete class through the interface reference. See [this post](http://blogs.msdn.com/b/ericlippert/archive/2011/05/09/optional-argument-corner-cases-part-one.aspx) by Eric Lippert for more details.\r\n\r\n\r\n## Avoid using named arguments ![](imgs/must.png) ##\r\n\r\nC# 4.0's named arguments have been introduced to make it easier to call COM components that are known for offering tons of optional parameters. If you need named arguments to improve the readability of the call to a method, that method is probably doing too much and should be refactored.\r\n\r\nThe only exception where named arguments improve readability is when a constructor that yields a valid object is called like this:\r\n\r\n```c#\r\nPerson person = new Person\r\n                (\r\n                    firstName: \"John\", \r\n                    lastName: \"Smith\", \r\n                    dateOfBirth: new DateTime(1970, 1, 1)\r\n                );\r\n```\r\n\r\n\r\n## Don't allow methods and constructors with more than three parameters ![](imgs/must.png) ##\r\n\r\nIf you end up with a method with more than three parameters, use a structure or class for passing multiple arguments such as explained in the [Specification](http://en.wikipedia.org/wiki/Specification_pattern) design pattern. In general, the fewer the number of parameters, the easier it is to understand the method. Additionally, unit testing a method with many parameters requires many scenarios to test.\r\n\r\n\r\n## Don't use `ref` or `out` parameters ![](imgs/must.png) ##\r\n\r\nThey make code less understandable and might cause people to introduce bugs. Prefer returning compound objects instead.\r\n\r\n\r\n## Avoid methods that take a `bool` flag ![](imgs/should.png) ##\r\n\r\nConsider the following method signature:\r\n\r\n```c#\r\npublic Customer CreateCustomer(bool platinumLevel) {}\r\n```\r\n\r\nOn first sight this signature seems perfectly fine, but when calling this method you will lose this purpose completely:\r\n\r\n```c#\r\nCustomer customer = CreateCustomer(true);\r\n```\r\n\r\nOften, a method taking such a flag is doing more than one thing and needs to be refactored into two or more methods. An alternative solution is to replace the flag with an enumeration. \r\n\r\n\r\n## Don't use parameters as temporary variables ![](imgs/may.png) ##\r\n\r\nNever use a parameter as a convenient variable for storing temporary state. Even though the type of your temporary variable may be the same, the name usually does not reflect the purpose of the temporary variable.\r\n\r\n\r\n## Always check the result of an as operation ![](imgs/must.png) ##\r\n\r\nIf you use as to obtain a certain interface reference from an object, always ensure that this operation does not return `null`. Failure to do so may cause a `NullReferenceException` at a much later stage if the object did not implement that interface.\r\n\r\n\r\n## Don't comment out code ![](imgs/must.png) ##\r\n\r\nNever check-in code that is commented-out, but instead use a work item tracking system to keep track of some work to be done. Nobody knows what to do when they encounter a block of commented-out code. Was it temporarily disabled for testing purposes? Was it copied as an example? Should I delete it? \r\n\r\n# Naming Guidelines #\r\n\r\n## Use English ![](imgs/must.png) ##\r\n\r\nAll type members, parameters and variables should be named using words from the English language.\r\n\r\n* Choose easily readable, preferably grammatically correct names. For example, `HorizontalAlignment` is more readable than `AlignmentHorizontal`.\r\n* Favour readability over brevity. The property name `CanScrollHorizontally` is better than `ScrollableX` (an obscure reference to the X-axis).\r\n* Avoid using names that conflict with keywords of widely used programming languages.\r\n\r\n![EXCEPTION](imgs/exception.png) In most projects, you will use words and phrases from your domain and names specific to your company. Visual Studio's **Static Code Analysis** will perform a spelling check on all code, so you may need to add those terms to a [Custom Code Analysis Dictionary](http://blogs.msdn.com/b/codeanalysis/archive/2007/08/20/new-for-visual-studio-2008-custom-dictionaries.aspx).\r\n\r\n![NOTE](imgs/note.png) Doomen's original document clearly stated that *Use US-English*. In this document, the *US* part is deliberately omitted.\r\n\r\n\r\n## Use proper casing for language elements ![](imgs/must.png) ##\r\n\r\nLanguage element | Casing | Example\r\n-----------------|--------|--------\r\nClass, Struct | Pascal | `AppDomain`\r\nInterface | Pascal | `IBusinessService`\r\nEnumeration type | Pascal | `ErrorLevel`\r\nEnumeration values | Pascal | `FatalError`\r\nEvent | Pascal | `Click`\r\nPrivate field | Camel | `listItem`\r\nProtected field | Pascal | `MainPanel`\r\nConst field | Pascal | `MaximumItems`\r\nConst variable | Camel | `maximumItems`\r\nRead-only static field | Pascal | `RedValue`\r\nVariable | Camel | `listOfValues`\r\nMethod | Pascal | `ToString`\r\nNamespace | Pascal | `System.Drawing`\r\nParameter | Camel | `typeName`\r\nType Parameter | Pascal | `TView`\r\nProperty | Pascal | `BackColor`\r\n\r\n\r\n## Don't include numbers in variables, parameters and type members ![](imgs/may.png) ##\r\n\r\nIn most cases they are a lazy excuse for not defining a clear and intention-revealing name.\r\n\r\n\r\n## Don't prefix fields ![](imgs/must.png) ##\r\n\r\nFor example, don't use `g_` or `s_` to distinguish static versus non-static fields. In general, a method in which it is difficult to distinguish local variables from member fields is too big. Examples of incorrect identifier names are: `_currentUser`, `mUserName`, `m_loginTime`.\r\n\r\n\r\n## Don't use abbreviations ![](imgs/should.png) ##\r\n\r\nFor example, use `OnButtonClick` rather than `OnBtnClick`. Avoid single character variable names, such as `i` or `q`. Use `index` or `query` instead.\r\n\r\n![EXCEPTION](imgs/exception.png) Use well-known abbreviations that are widely accepted or well-known within the domain you work. For instance, use `UI` instead of `UserInterface`. \r\n\r\n\r\n## Name a member, parameter or variable according its meaning and not its type ![](imgs/should.png) ##\r\n\r\n* Use functional names. For example, `GetLength` is a better name than `GetInt`.\r\n* Don't use terms like `Enum`, `Class` or `Struct` in a name.\r\n* Identifiers that refer to a collection type should have a **plural** name.\r\n\r\n\r\n## Name types using nouns, noun phrases or adjective phrases ![](imgs/should.png) ##\r\n\r\nBad examples include `SearchExamination` (a page for searching for examinations), `Common` (does not end with a noun, and does not explain its purpose) and `SiteSecurity` (although the name is technically okay, it does not say anything about its purpose). Good examples include `BusinessBinder`, `SmartTextBox`, or `EditableSingleCustomer`.\r\n\r\nDon't include terms like `Utility` or `Helper` in classes. Classes with a name like that are usually static classes and are introduced without considering the object-oriented principles (See [Avoid static classes](Class.Design.Guidelines.md#avoid-static-classes-)).\r\n\r\n\r\n## Name generic type parameters with descriptive names ![](imgs/should.png) ##\r\n\r\n* Always prefix descriptive type parameter names with the letter `T`.\r\n* Always use a descriptive names unless a single-letter name is completely self-explanatory and a longer name would not add value. Use the single letter `T` as the type parameter in that case.\r\n* Consider indicating constraints placed on a type parameter in the name of parameter. For example, a parameter constrained to `ISession` may be called `TSession`.\r\n\r\n\r\n## Don't repeat the name of a class or enumeration in its members ![](imgs/must.png) ##\r\n\r\n```c#\r\nclass Employee\r\n{\r\n    // Wrong! \r\n    static GetEmployee() {}\r\n    DeleteEmployee() {}\r\n\r\n    // Right\r\n    static Get() {...}\r\n    Delete() {...}\r\n\r\n    // Also correct.\r\n    AddNewJob() {...}\r\n    RegisterForMeeting() {...}\r\n}\r\n```\r\n\r\n\r\n## Name members similarly to members of related .NET Framework classes ![](imgs/may.png) ##\r\n\r\n.NET developers are already accustomed to the naming patterns the framework uses, so following this same pattern helps them find their way in your classes as well. For instance, if you define a class that behaves like a collection, provide members like `Add`, `Remove` and `Count` instead of `AddItem`, `Delete` or `NumberOfItems`.\r\n\r\n\r\n## Avoid short names or names that can be mistaken with other names ![](imgs/must.png) ##\r\n\r\nAlthough technically correct, the following statement can be quite confusing.\r\n\r\n```c#\r\nbool b001 = (lo == l0) ? (I1 == 11) : (lOl != 101);\r\n```\r\n\r\n\r\n## Properly name properties ![](imgs/should.png) ##\r\n\r\n* Do name properties with nouns, noun phrases, or occasionally adjective phrases.\r\n* Do name Boolean properties with an affirmative phrase. eg) `CanSeek` instead of `CantSeek`.\r\n* Consider prefixing Boolean properties with `Is`, `Has`, `Can`, `Allows`, or `Supports`.\r\n* Consider giving a property the same name as its type. When you have a property that is strongly typed to an enumeration, the name of the property can be the same as the name of the enumeration. For example, if you have an enumeration named `CacheLevel`, a property that returns one of its values can also be named `CacheLevel`.\r\n\r\n\r\n## Name methods using verb-object pair ![](imgs/should.png) ##\r\n\r\nName methods using a verb-object pair such as `ShowDialog`. A good name should give the member a hint on the *what*, and if possible, the *why*. Also, don't include `And` in the name of the method. It implies that the method is doing more than one thing, which violates the single responsibility principle explained in [here](Member.Design.Guidelines.md#a-method-or-property-does-only-one-thing-).\r\n\r\n\r\n## Name namespaces using names, layers, verbs and features ![](imgs/may.png) ##\r\n\r\nFor instance, the following namespaces are good examples of that guideline.\r\n\r\n* `NHibernate.Extensibility`\r\n* `Microsoft.ServiceModel.WebApi`\r\n* `Microsoft.VisualStudio.Debugging`\r\n* `FluentAssertion.Primitives`\r\n* `CaliburnMicro.Extensions`\r\n\r\n![NOTE](imgs/note.png) Never allow namespaces to contain the name of a type, but a noun in its plural form, eg) `Collections`, is usually okay.\r\n\r\n\r\n## Use a verb or verb phrase to name an event ![](imgs/should.png) ##\r\n\r\nName events with a verb or a verb phrase. For example: `Click`, `Deleted`, `Closing`, `Minimizing`, and `Arriving`. For example, the declaration of the Search event may look like this:\r\n\r\n```c# \r\npublic event EventHandler<SearchArgs> Search;\r\n```\r\n\r\n\r\n## Use `-ing` and `-ed` to express pre-events and post-events ![](imgs/may.png) ##\r\n\r\nFor example, a close event that is raised before a window is closed would be called `Closing` and one that is raised after the window is closed would be called `Closed`. Don't use `Before` or `After` prefixes or suffixes to indicate pre and post events.\r\n \r\nSuppose you want to define events related to the deletion process of an object. Avoid defining the `Deleting` and `Deleted` events as `BeginDelete` and `EndDelete`. Define those events as follows:\r\n\r\n* `Deleting`: Occurs just before the object is getting deleted\r\n* `Delete`: Occurs when the object needs to be deleted by the event handler.\r\n* `Deleted`: Occurs when the object is already deleted.\r\n\r\n\r\n## Prefix an event handler with On ![](imgs/may.png) ##\r\n\r\nIt is good practice to prefix the method that handles an event with `On`. For example, a method that handles the `Closing` event could be named `OnClosing`.\r\n\r\n\r\n## Use an underscore for irrelevant lambda parameters ![](imgs/may.png) ##\r\n\r\nIf you use a lambda statement, for instance, to subscribe to an event, and the actual parameters of the event are irrelevant, use the following convention to make that more explicit.\r\n\r\n```c#\r\nbutton.Click += (_, __) => HandleClick();\r\n```\r\n\r\n\r\n## Group extension methods in a class suffixed with Extensions ![](imgs/may.png) ##\r\n\r\nIf the name of an extension method conflicts with another member or extension method, you must prefix the call with the class name. Having them in a dedicated class with the `Extensions` suffix improves readability.\r\n\r\n\r\n## Postfix asynchronous methods with `Async` of `TaskAsync` ![](imgs/should.png) ##\r\n\r\nThe general convention for methods that return `Task` or `Task<TResult>` is to post-fix them with `Async`, but if such a method already exist, use `TaskAsync` instead.\r\n\r\n# Performance Guidelines #\r\n\r\n## Consider using `Any()` to determine whether an `IEnumerable<T>` is empty ![](imgs/may.png) ##\r\n\r\nWhen a method or other member returns an `IEnumerable<T>` or other collection class that does not expose a `Count` property, use the `Any()` extension method rather than `Count()` to determine whether the collection contains items. If you do use `Count()`, you risk that iterating over the entire collection might have a significant impact (such as when it really is an `IQueryable<T>` to a persistent store).\r\n\r\n![NOTE](imgs/note.png) If you return an `IEnumerable<T>` to prevent editing from outside the owner as explained in [here](Member.Design.Guidelines.md#return-an-ienumerablet-or-icollectiont-instead-of-a-concrete-collection-class-) and you're developing in .NET 4.5+, consider the new read-only classes. \r\n\r\n\r\n## Only use async for low-intensive long-running activities ##\r\n\r\nThe usage of `async` won't automatically run something on a worker thread like `Task.Run` does. It just adds the necessary logic to allow releasing the current thread and marshal the result back on that same thread if a long-running asynchronous operation has completed. In other words, use `async` only for I/O bound operations. \r\n\r\n\r\n## Prefer Task.Run for CPU intensive activities ##\r\n\r\nIf you do need to execute a CPU bound operation, use `Task.Run` to offload the work to a thread from the Thread Pool. Just don't forget that you have to marshal the result back to your main thread manually.\r\n\r\n\r\n## Beware of mixing up `await`/`async` with `Task.Wait` ##\r\n\r\n`await` will not block the current thread but simply instruct to compiler to generate a state-machine. However, `Task.Wait` will block the thread and may even cause dead-locks (See [Beware of async/await deadlocks in single-threaded environments](Performance.Guidelines.md#beware-of-async-await-deadlocks-in-single-threaded-environments)).\r\n\r\n\r\n## Beware of `async`/`await` deadlocks in single-threaded environments ##\r\n\r\nConsider the following asynchronous method:\r\n\r\n```c#\r\nprivate async Task<string> GetDataAsync()\r\n{\r\n\tvar result = await MyWebService.GetDataAsync();\r\n\treturn result.ToString();\r\n}\r\n```\r\n\r\nNow when an ASP.NET MVC controller action does this:\r\n\r\n```c#\r\npublic ActionResult ActionAsync()\r\n{\r\n\tvar data = GetDataAsync().Result;\r\n\t\t\r\n\treturn View(data);\r\n}\r\n```\r\n\r\nYou'll end up with a deadlock. Why? Because the `Result` property getter will block until the `async` operation has completed, but since an `async` method will automatically marshal the result back to the original thread and ASP.NET uses a single-threaded synchronisation context, they'll be waiting on each other. A similar problem can also happen on WPF, Silverlight or a Windows Store C#/XAML app. Read more about this [here](http://blogs.msdn.com/b/pfxteam/archive/2011/01/13/10115163.aspx).\r\n\r\n# Framework Guidelines #\r\n\r\n## Use C# type aliases instead of the types from the `System` namespace ![](imgs/must.png) ##\r\n\r\nFor instance, use `object` instead of `Object`, `string` instead of `String`, and `int` instead of `Int32`. These aliases have been introduced to make the primitive types a first class citizen of the C# language so use them accordingly.\r\n\r\n![EXCEPTION](imgs/exception.png) When referring to static members of those types, it is custom to use the full CLS name, eg) `Int32.Parse()` instead of `int.Parse()`.\r\n\r\n\r\n## Properly name properties, variables or fields referring to localised resources ![](imgs/may.png) ##\r\n\r\nThe guidelines in this topic apply to localisable resources such as error messages and menu text.\r\n\r\n* Use Pascal casing in resource keys.\r\n* Provide descriptive rather than short identifiers. Keep them concise where possible, but don't sacrifice readability.\r\n* Use only alphanumeric characters in naming resources.\r\n\r\n\r\n## Don't hardcode strings that change based on the deployment ![](imgs/may.png) ##\r\n\r\nExamples include connection strings, server addresses, etc. Use `Resources`, the `ConnectionStrings` property of the `ConfigurationManager` class, or the `Settings` class generated by Visual Studio. Maintain the actual values into the `app.config` or `web.config` (and most definitely not in a custom configuration store). \r\n\r\n\r\n## Build with the highest warning level ![](imgs/must.png) ##\r\n\r\nConfigure the development environment to use **Warning Level 4** for the C# compiler, and enable the option **Treat warnings as errors**. This allows the compiler to enforce the highest possible code quality. \r\n\r\n\r\n## Properly fill the attributes of the `AssemblyInfo.cs` file ![](imgs/may.png) ##\r\n\r\nEnsure that the attributes for the company name, description, copyright statement, version, etc. are filled. One way to ensure that version and other fields that are common to all assemblies have the same values, is to move the corresponding attributes out of the `AssemblyInfo.cs` into a `SolutionInfo.cs` file that is shared by all projects within the solution.  \r\n\r\n\r\n## Avoid LINQ for simple expressions ![](imgs/may.png) ##\r\n\r\nRather than\r\n\r\n```c#\r\nvar query = from item in items where item.Length > 0;\r\n```\r\n\r\nPrefer using the extension methods from the `System.Linq` namespace.\r\n\r\n```c#\r\nvar query = items.Where(i => i.Length > 0);\r\n```\r\n\r\nSince LINQ queries should be written out over multiple lines for readability, the second example is a bit more readable.\r\n\r\n\r\n## Use Lambda expressions instead of delegates ![](imgs/should.png) ##\r\n\r\nLambda expressions provide a much more elegant alternative for anonymous delegates. So instead of\r\n\r\n```c#\r\nCustomer c = Array.Find(customers, delegate(Customer c) \r\n{ \r\n\treturn c.Name == \"Tom\"; \r\n});\r\n```\r\n\r\nuse a Lambda expression:\r\n\r\n```c#\r\nCustomer c = Array.Find(customers, c => c.Name == \"Tom\");\r\n```\r\n \r\nOr even better\r\n\r\n```c#\r\nvar customer = customers.Where(c => c.Name == \"Tom\");\r\n```\r\n\r\n\r\n## Only use the dynamic keyword when talking to a dynamic object ![](imgs/must.png) ##\r\n\r\nThe dynamic keyword has been introduced for working with dynamic languages. Using it introduces a serious performance bottleneck because the compiler has to generate some complex Reflection code.\r\n \r\nUse it only for calling methods or members of a dynamically created instance (using the `Activator`) class as an alternative to `Type.GetProperty()` and `Type.GetMethod()`, or for working with COM Interop types.\r\n\r\n\r\n## Favour `async`/`await` over the Task ##\r\n\r\nUsing the new C# 5.0 keywords results in code that can still be read sequentially and also improves maintainability a lot, even if you need to chain multiple asynchronous operations. For example, rather than defining your method like this:\r\n\r\n```c#\r\npublic Task<Data> GetDataAsync()\r\n{\r\n    return MyWebService.FetchDataAsync()\r\n                       .ContinueWith(t => new Data (t.Result));\r\n}\r\n```\r\n\r\nDefine it like this:\r\n\r\n```c#\r\npublic async Task<Data> GetDataAsync()\r\n{\r\n    var result = await MyWebService.FetchDataAsync();\r\n\r\n    return new Data (result);\r\n}\r\n```\r\n\r\n# Documentation Guidelines #\r\n\r\n## Write comments and documentation in English ![](imgs/must.png) ##\r\n\r\nDocuments must be written in English (see [here](Naming.Guidelines.md#use-english-)).\r\n\r\n![NOTE](imgs/note.png) Doomen's original document clearly stated that *Use US-English*. In this document, the *US* part is deliberately omitted.\r\n\r\n\r\n## Document all public, protected and internal types and members ![](imgs/should.png) ##\r\n\r\nDocumenting your code allows Visual Studio to pop-up the documentation when your class is used somewhere else. Furthermore, by properly documenting your classes, tools can generate professionally looking class documentation.\r\n\r\n\r\n## Write XML documentation with another developer in mind ![](imgs/should.png) ##\r\n\r\nWrite the documentation of your type with another developer in mind. Assume he or she will not have access to the source code and try to explain how to get the most out of the functionality of your type.\r\n\r\n\r\n## Write MSDN-style documentation ![](imgs/may.png) ##\r\n\r\nFollowing the MSDN on-line help style and word choice helps the developer to find its way through your documentation more easily.\r\n \r\n![NOTE](imgs/note.png) Either [GhostDoc](http://submain.com/products/ghostdoc.aspx) or [Sandcastle Help File Builder](https://shfb.codeplex.com) can generate a starting point for documenting code with a shortcut key.\r\n\r\n\r\n## Avoid inline comments ![](imgs/should.png) ##\r\n\r\nIf you feel the need to explain a block of code using a comment, consider replacing that block with a method having a clear name.\r\n\r\n\r\n## Only write comments to explain complex algorithms or decisions ![](imgs/must.png) ##\r\n\r\nTry to focus comments on the why and what of a code block and not the how. Avoid explaining the statements in words, but instead help the reader understand why you chose a certain solution or algorithm and what you are trying to achieve. If applicable, also mention that you chose an alternative solution because you ran into a problem with the obvious solution.\r\n\r\n\r\n## Don't use comments for tracking work to be done later ![](imgs/may.png) ##\r\n\r\nAnnotating a block of code or some work to be done using a TODO or similar comment may seem a reasonable way of tracking work-to-be-done. But in reality, nobody really searches for comments like that. Use a work item tracking system such as Team Foundation Server to keep track of left overs.\r\n\r\n# Layout Guidelines #\r\n\r\n## Use a common layout ![](imgs/must.png) ##\r\n\r\n* Keep the length of each line under 130 characters.\r\n* Use an indentation of 4 whitespaces, and don't use tabs\r\n* Keep one whitespace between keywords like `if` and the expression, but don't add whitespaces after `(` and before `)` such as:\r\n\r\n```c#\r\nif (condition == null)\r\n```\r\n\r\n* Add a whitespace around operators, like `+`, `-`, `==`, etc.\r\n* Always succeed the keywords `if`, `else`, `do`, `while`, `for` and `foreach`, with opening and closing parentheses, even though the language does not require it.\r\n* Always put opening and closing parentheses on a new line.\r\n* Indent object Initialisers and initialise each property on a new line, so use a format like this: \r\n\r\n```c#\r\nvar dto = new ConsumerDto()\r\n          {\r\n              Id = 123,\r\n              Name = \"Microsoft\",\r\n              PartnerShip = PartnerShip.Gold,\r\n          }\r\n```\r\n\r\n* Don't indent lambda statements and use a format like this:\r\n\r\n```c#\r\nmethodThatTakesAnAction.Do(x =>\r\n{\r\n  // do something like this \r\n}\r\n```\r\n\r\n* Put the entire LINQ statement on one line, or start each keyword at the same indentation, like this:\r\n\r\n```c#\r\nvar query = from product in products where product.Price > 10 select product;\r\n```\r\n\r\nor\r\n\r\n```c#\r\nvar query =\r\n    from product in products\r\n    where product.Price > 10\r\n    select product;\r\n```\r\n\r\n* Start the LINQ statement with all the `from` expressions and don't interweave them with where restrictions.\r\n* Add braces around every comparison condition, but don't add braces around a singular condition. For example\r\n\r\n```c#\r\nif (!String.IsNullOrEmpty(str) && (str != \"new\"))\r\n```\r\n\r\n* Add an empty line between multi-line statements, between members, after the closing parentheses, between unrelated code blocks, around the `#region` keyword, and between the using statements of different companies.\r\n\r\n\r\n## Order and group namespaces according the company ![](imgs/may.png) ##\r\n\r\n```c#\r\n// Microsoft namespaces are first\r\nusing System;\r\nusing System.Collections;\r\nusing System.XML;\r\n \r\n// Then any other namespaces in alphabetic order\r\nusing AvivaSolutions.Business;\r\nusing AvivaSolutions.Standard;\r\n\r\nusing Telerik.WebControls;\r\nusing Telerik.Ajax;\r\n```\r\n\r\n\r\n## Place members in a well-defined order ![](imgs/must.png) ##\r\n\r\nMaintaining a common order allows other team members to find their way in your code more easily. In general, a source file should be readable from top to bottom, as if you are reading a book. This prevents readers from having to browse up and down through the code file.\r\n\r\n1.\tPrivate fields and constants (in a region)\r\n2.\tPublic constants\r\n3.\tPublic read-only static fields\r\n4.\tFactory Methods\r\n5.\tConstructors and the Finalizer\r\n6.\tEvents \r\n7.\tPublic Properties\r\n8.\tOther methods and private properties in calling order\r\n\r\n\r\n## Be reluctant with `#region`s ![](imgs/must.png) ##\r\n\r\nRegions can be helpful, but can also hide the main purpose of a class. Therefore, use #regions only for:\r\n\r\n* Private fields and constants (preferably in a `Private Definitions` region).\r\n* Nested classes\r\n* Interface implementations (only if the interface is not the main purpose of that class) \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}